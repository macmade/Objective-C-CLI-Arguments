/*******************************************************************************
 * Copyright (c) 2010, Jean-David Gadina - www.xs-labs.com
 * Distributed under the Boost Software License, Version 1.0.
 * 
 * Boost Software License - Version 1.0 - August 17th, 2003
 * 
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute,
 * execute, and transmit the Software, and to prepare derivative works of the
 * Software, and to permit third-parties to whom the Software is furnished to
 * do so, all subject to the following:
 * 
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer,
 * must be included in all copies of the Software, in whole or in part, and
 * all derivative works of the Software, unless such copies or derivative
 * works are solely in the form of machine-executable object code generated by
 * a source language processor.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 ******************************************************************************/

/* $Id$ */

/*!
 * @class       CLIArguments
 * @abstract    A class to ease the retrieval of command line arguments
 * @version     1.0
 * 
 * @discussion  Three different kind of command line arguments are supported by
 *              this class:
 *                  -   Unnamed arguments (only a value)
 *                  -   Named arguments (with a value)
 *                  -   Flag arguments (no value)
 *              Flag and named arguments may be specified either with the '-'
 *              or '--' characters.
 *              Named arguments may be written in two different forms:
 *                  -   Compact form: the argument name is immediately followed
 *                      by an '=' sign, immediately followed by the argument's
 *                      value
 *                  -   Standard form: the argument is followed by it's value,
 *                      separated by a space character.
 */
@interface CLIArguments: NSObject
{
@protected
    
    /*!
     * @var         process
     * @abstract    Inormations about the current process
     */
    NSProcessInfo * process;
    
    /*!
     * @var         arguments
     * @abstract    An array with the unnamed arguments
     */
    NSMutableArray * arguments;
    
    /*!
     * @var         valueArguments
     * @abstract    A dictionary with the arguments having a value
     */
    NSMutableDictionary * valueArguments;
    
    /*!
     * @var         flagArguments
     * @abstract    A dictionary with the arguments which are flags
     */
    NSMutableDictionary * flagArguments;
    
@private
    
    /*!
     * @var         r1
     * @abstract    Reserved 1
     * 
     * @discussion  Reserved instance variables to help ensure binary
     *              compatibility with future versions of the class.
     */
    id r1;
    
    /*!
     * @var         r2
     * @abstract    Reserved 2
     * 
     * @discussion  Reserved instance variables to help ensure binary
     *              compatibility with future versions of the class.
     */
    id r2;
}

/*!
 * @property    arguments
 * @abstract    
 * 
 * @discussion  An array with the unnamed arguments passed to the current process
 */   
@property( readonly ) NSArray * arguments;

/*!
 * @method      initWithFlagArguments:valueArguments:
 * @abstract    
 * @param       fargs   An array with the arguments' names to consider as flags, meaning they don't have a value
 * @param       vargs   An array with the arguments' names which must have a value. The value may follow the argument, or be expressed with an '=' sign.
 * @result      A configured instance of the class
 * 
 * @discussion  This method is the only way to get a valid and configured
 *              instance of this class, as the arguments can't be specified
 *              separately. A call to the 'init' method is valid, but will
 *              produce an unusable object.
 */
- ( id )initWithFlagArguments: ( NSArray * )fargs valueArguments: ( NSArray * )vargs;

/*!
 * @method      hasFlag:
 * @abstract    Checks whether a flag argument (no value) was specified when calling the current process
 * @param       name    The argument's name
 * @result      'YES' if the argument was specified when calling the current process, otherwise 'NO'
 */
- ( BOOL )hasFlag: ( NSString * )name;

/*!
 * @method      boolForArgument:
 * @abstract    Gets a 'BOOL' value representing the argument's value
 * @param       name    The argument's name
 * @result      The argument's value as a 'BOOL' value
 */
- ( BOOL )boolForArgument: ( NSString * )name;

/*!
 * @method      intForArgument:
 * @abstract    Gets an 'int' value representing the argument's value
 * @param       name    The argument's name
 * @result      The argument's value as an 'int' value
 */
- ( int )intForArgument: ( NSString * )name;

/*!
 * @method      longLongForArgument:
 * @abstract    Gets a 'long long' value representing the argument's value
 * @param       name    The argument's name
 * @result      The argument's value as a 'long long' value
 */
- ( long long )longLongForArgument: ( NSString * )name;

/*!
 * @method      integerForArgument:
 * @abstract    Gets a 'NSInteger' value representing the argument's value
 * @param       name    The argument's name
 * @result      The argument's value as a 'NSInteger' value
 */
- ( NSInteger )integerForArgument: ( NSString * )name;

/*!
 * @method      floatForArgument:
 * @abstract    Gets a 'float' value representing the argument's value
 * @param       name    The argument's name
 * @result      The argument's value as a 'float' value
 */
- ( float )floatForArgument: ( NSString * )name;

/*!
 * @method      doubleForArgument:
 * @abstract    Gets a 'double' value representing the argument's value
 * @param       name    The argument's name
 * @result      The argument's value as a 'double' value
 */
- ( double )doubleForArgument: ( NSString * )name;

/*!
 * @method      stringForArgument:
 * @abstract    Gets a 'NSString' object representing the argument's value
 * @param       name    The argument's name
 * @result      The argument's value as a 'NSString' object
 */
- ( NSString * )stringForArgument: ( NSString * )name;

@end
